{"version":3,"sources":["files.core.ts","template.core.ts","restore.services.ts","restore.ts"],"names":[],"mappings":"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","file":"restore.map","sourceRoot":"..\\src","sourcesContent":["import path = require(\"path\");\nimport iconv = require(\"iconv-lite\");\nimport recursive = require(\"recursive-readdir\");\nimport { readFileSync, writeFileSync, mkdirSync, existsSync } from \"fs\";\n\nexport interface File {\n  name: string;\n  dirpath: string;\n  text: string;\n}\n\nexport function makeEmptyFile(): File {\n  return {\n    name: \"\",\n    dirpath: \"\",\n    text: \"\"\n  };\n}\n\nexport function loadFileSync(\n  filepath: string,\n  { charset }: { charset: string } = { charset: \"utf-8\" }\n): File {\n  const _filepath: string = path.resolve(filepath);\n  const data = readFileSync(_filepath);\n  return {\n    name: path.basename(_filepath),\n    dirpath: path.dirname(_filepath),\n    text: iconv.decode(Buffer.from(data), charset)\n  };\n}\n\nexport function outputFileSync(\n  file: File,\n  { charset }: { charset: string } = { charset: \"utf-8\" }\n): void {\n  const filepath: string = path.join(file.dirpath, file.name);\n  if (filepath) {\n    mkdirRecursiveSync(path.resolve(filepath, \"../\"));\n    writeFileSync(filepath, iconv.encode(file.text, charset));\n  }\n}\n\nexport function mkdirRecursiveSync(dirpath: string) {\n  if (!existsSync(dirpath)) {\n    mkdirSync(dirpath, { recursive: true });\n  }\n}\n\nexport async function readdirpSync(dirpath: string): Promise<string[]> {\n  return new Promise((resolve, reject) => {\n    recursive(dirpath).then(\n      function(files) {\n        const pathlist = files || [];\n        resolve(pathlist.map(p => path.resolve(p)));\n      },\n      function(error) {\n        console.error(\"something exploded\", error);\n        reject(error);\n      }\n    );\n  });\n}\n","/**\n * テンプレートの${key}をvalで置換する処理\n * @param {Object} param 置換文字列のkey:valペア\n * @param {String} tmpl テンプレート文字列、${key}形式で記述\n * @param {String} NULL paramがNullのときに置き換える文字列\n */\nexport function fillDollarMustache(tmpl: string = \"\", param: { [key: string]: string }) {\n  let result = tmpl;\n  for (const key in param) {\n    if (param.hasOwnProperty(key)) {\n      const regexp = new RegExp(`\\\\$\\\\{${key}\\\\}`, \"g\");\n      result = result.replace(regexp, `${param[key]}`);\n    }\n  }\n  return result;\n}\n","import path = require(\"path\");\nimport moment = require(\"moment\");\nimport { File, makeEmptyFile } from \"./files.core\";\nimport { fillDollarMustache } from \"./template.core\";\n\nconst _rules: {\n  [key: string]: {\n    regexp: RegExp;\n    dirname: string;\n  };\n} = {\n  BACKUP: {\n    regexp: new RegExp(`ACE_[A-Z0-9]{3}_(T|V)[0-9]{4}(.?)(_.+?)*-DATA`, \"g\"),\n    dirname: \"0_PREPARE\"\n  },\n  RESTORE: {\n    regexp: new RegExp(`ACE_[A-Z0-9]{3}_(T|V)[0-9]{4}(.?)(_.+?)*-DATA`, \"g\"),\n    dirname: \"9_RESTORE\"\n  },\n  SP: {\n    regexp: new RegExp(`(JFN|JPR|JPK)_RE(F|M|C)(.?){3}(_)[0-9]{3}(.?)(_.+?)*`, \"g\"),\n    dirname: \"9_RESTORE\"\n  }\n};\n\nexport interface IRestoreTemplateSet {\n  [job: string]: File;\n}\n\nexport function applyRestoreRule(filepath: string, template: IRestoreTemplateSet): File[] {\n  const jobList = assignJob(filepath);\n  const param: { [key: string]: string } = parameterize(filepath);\n\n  return jobList.map((job: string) => {\n    const tmpl: File = template[job] || makeEmptyFile();\n    const name: string = fillDollarMustache(tmpl.name, param);\n    const dirpath: string = _rules[job].dirname;\n    const text: string = fillDollarMustache(tmpl.text, param);\n\n    return { name, dirpath, text };\n  });\n}\n\nexport function assignJob(filepath: string): string[] {\n  let jobList: string[] = [];\n\n  const jobs: string[] = Object.keys(_rules);\n  for (const job of jobs) {\n    const regexp: RegExp = _rules[job].regexp;\n    if (filepath.match(regexp)) {\n      jobList.push(job);\n    }\n  }\n\n  return jobList;\n}\n\nexport function parameterize(filepath: string): { [key: string]: string } {\n  const filename: string = path.basename(filepath, path.extname(filepath));\n  const parts: string[] = filename.split(\"-\");\n  return {\n    name: parts[0] || \"\",\n    type: parts[1] || \"\",\n    version: parts[2] ? parts[2].split(\".\").join(\"\") : moment().format(\"YYMMDD\")\n  };\n}\n","import \"@babel/polyfill\";\nimport path = require(\"path\");\nimport { outputFileSync, readdirpSync, File, loadFileSync, makeEmptyFile } from \"./files.core\";\nimport { applyRestoreRule, IRestoreTemplateSet } from \"./restore.services\";\n\nexport async function makeRestoreScript(inputpath: string): Promise<string[]> {\n  const targetFilePathList: string[] = await findTargeFilePath(inputpath);\n\n  const RestoreTemplate: IRestoreTemplateSet = loadAllTemplate();\n  const restoreFileList = targetFilePathList.flatMap((filepath: string) => {\n    return applyRestoreRule(filepath, RestoreTemplate);\n  });\n\n  return outputRestoreScript(restoreFileList, makeOutputDirPath(inputpath));\n}\n\nexport async function findTargeFilePath(filepath: string): Promise<string[]> {\n  const findFiles: string[] = await Promise.resolve(readdirpSync(filepath));\n  return findFiles.filter(f => f.match(/[.](SQL|sql)$/g));\n}\n\nexport function loadAllTemplate(): IRestoreTemplateSet {\n  return {\n    BACKUP: loadFileSync(path.resolve(\"./static/template/Restore/${name}-BACKUP-${version}.sql\")),\n    RESTORE: loadFileSync(path.resolve(\"./static/template/Restore/${name}-RESTORE-${version}.sql\")),\n    SP: loadFileSync(path.resolve(\"./static/template/Restore/SP-${version}.txt\"))\n  };\n}\n\nfunction makeOutputDirPath(inputpath: string): string {\n  return path.resolve(\"./\", inputpath);\n}\n\nfunction outputRestoreScript(files: File[], outputDir: string) {\n  // SP系はひとつのファイルにまとめる\n  const rolluped = rollupSPScript(files);\n  return rolluped.map(file => {\n    // 出力先を再設定\n    file.dirpath = path.join(outputDir, file.dirpath);\n    outputFileSync(file);\n    return path.join(file.dirpath, file.name);\n  });\n}\n\nfunction rollupSPScript(files: File[]): File[] {\n  let noSPFiles: File[] = files.filter(f => !f.name.match(/SP/g));\n\n  const spFiles: File[] = files.filter(f => f.name.match(/SP/g)) || [];\n  if (spFiles.length) {\n    const rollupedFile: File = spFiles.reduce((a, b) => {\n      let tmp: File = Object.assign(makeEmptyFile(), b);\n      tmp.text = [a.text, b.text].join(\"\\n\");\n      return tmp;\n    }, makeEmptyFile());\n    noSPFiles.push(rollupedFile);\n  }\n\n  return noSPFiles;\n}\n"]}